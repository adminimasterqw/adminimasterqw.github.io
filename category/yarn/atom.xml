<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://methiony.work</id>
    <title>Andrésen • Posts by &#34;yarn&#34; category</title>
    <link href="https://methiony.work" />
    <updated>2020-11-27T13:56:16.000Z</updated>
    <entry>
        <id>https://methiony.work/2020/11/27/Platform-construction/Yarn/course-4/Yarn%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E8%BF%B0/</id>
        <title>Yarn的基本概述</title>
        <link rel="alternate" href="https://methiony.work/2020/11/27/Platform-construction/Yarn/course-4/Yarn%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E8%BF%B0/"/>
        <content type="html">&lt;h1 id=&#34;1-yarn的介绍&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-yarn的介绍&#34;&gt;#&lt;/a&gt; 1、yarn 的介绍&lt;/h1&gt;
&lt;p&gt;yarn 是 hadoop 集群当中的资源管理系统模块，从 hadoop2.0 始引入 yarn 模块 yarn 可为各类计算框架提供资源的管理和调度，主要用于管理集群当中的资源 (主要是服务器的各种硬件资源，包括 CPU, 内存，磁盘，网络 1o 等) 以及调度运行在 yarn 上面的各种任务&lt;/p&gt;
&lt;p&gt;yarn 核心出发点是为了分离资源管理与作业监控，实现分离的做法是拥有一个全局的资源管理 (ResourceManager,RM), 以及每个应用程序对应一个的应用管理器 (Application Master, AM)&lt;/p&gt;
&lt;p&gt;yam 主要就是为了调度资源，管理任务等&lt;br /&gt;
其调度分为两个层级来说:&lt;br /&gt;
 一级调度管理&lt;br /&gt;
计算资源管理 (CPU, 内存，网络 IO, 磁盘)&lt;br /&gt;
 二级调度管理&lt;br /&gt;
任务内部的计算模型管理 (AppMaster 的任务精细化管理)&lt;/p&gt;
&lt;h1 id=&#34;2-yarn的主要组件介绍与作用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-yarn的主要组件介绍与作用&#34;&gt;#&lt;/a&gt; 2、Yarn 的主要组件介绍与作用&lt;/h1&gt;
&lt;p&gt;YARN 总体上是 Master/ Slave 结构，主要由 ResourceManager、NodeManager、Application Master 和 Container 等几个组件构成&lt;/p&gt;
&lt;h2 id=&#34;1-resource-managerrm&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-resource-managerrm&#34;&gt;#&lt;/a&gt; 1、Resource Manager(RM)&lt;/h2&gt;
&lt;p&gt;负责处理客户端请求对各 NM 上的资源进行统一管理和调度。给 Application Master 分配空闲的 Container 运行并监控其运行状态。主要由两个组件构成：调度器和应用程序管理器&lt;/p&gt;
&lt;h3 id=&#34;调度器scheduler&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#调度器scheduler&#34;&gt;#&lt;/a&gt; 调度器（scheduler）&lt;/h3&gt;
&lt;p&gt;调度器根据容量、队列等限制条件，将系统中的资源分配给各个正在运行的应用程序。调度器仅根据各个应用程序的资源需求进行资源分配，而资源分配单位是 Container。 Scheduler. 不负责监控或者跟踪应用程序的状态。总之，调度器根据应用程序的资源要求，以及集群机器的资源情况，为应用程序分配封装在 Container 中的资源&lt;/p&gt;
&lt;h3 id=&#34;应用程序管理器-applications-manager&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#应用程序管理器-applications-manager&#34;&gt;#&lt;/a&gt; 应用程序管理器 (Applications Manager)&lt;/h3&gt;
&lt;p&gt;应用程序管理器负责管理整个系统中所有应用程序，包括应用程序提交、与调度器协商资源以启动 Application Master、监控 Application Master, 运行状态并在失败时重新启动等，跟踪分给的 Container 的进度、状态也是其职责。&lt;/p&gt;
&lt;h2 id=&#34;2-nodemanagernm&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-nodemanagernm&#34;&gt;#&lt;/a&gt; 2、NodeManager(NM)&lt;/h2&gt;
&lt;p&gt;NodeManager 是每个节点上的资源和任务管理器。它会定时地向 ResourceManager 汇报本节点上的资源使用情况和各个 Container 的运行状态；同时会接收并处理来自 ApplicationMaster 的 Container 启动停止等请求。&lt;/p&gt;
&lt;h2 id=&#34;3-applicationmasteram&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-applicationmasteram&#34;&gt;#&lt;/a&gt; 3、ApplicationMaster(AM)&lt;/h2&gt;
&lt;p&gt;用户提交的应用程序均包含一个 Application Master, 负责应用的监控，跟踪应用执行状态，重启失败任务等。 Application Master 是应用框架，它负责向 ResourceManager 协调资源，并且与 Node Manager 协同工作完成 Task 的执行和监控&lt;/p&gt;
&lt;h2 id=&#34;4-container&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-container&#34;&gt;#&lt;/a&gt; 4、Container&lt;/h2&gt;
&lt;p&gt;Container 是 YARN 中的资源抽象，它封装了某个节点上的多维度资源，如内存、CPU、磁盘、网络等，当 ApplicationMaster 向 ResourceManager 申请资源时，ResourceManager 为 ApplicationMaster 返回的资源便是用 Container 表示的。&lt;/p&gt;
</content>
        <updated>2020-11-27T13:56:16.000Z</updated>
    </entry>
</feed>
