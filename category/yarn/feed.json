{
    "version": "https://jsonfeed.org/version/1",
    "title": "Andrésen • All posts by \"yarn\" category",
    "description": "",
    "home_page_url": "https://methiony.work",
    "items": [
        {
            "id": "https://methiony.work/2020/11/27/Platform-construction/Yarn/course-4/Yarn%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E8%BF%B0/",
            "url": "https://methiony.work/2020/11/27/Platform-construction/Yarn/course-4/Yarn%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E8%BF%B0/",
            "title": "Yarn的基本概述",
            "date_published": "2020-11-27T13:56:16.000Z",
            "content_html": "<h1 id=\"1-yarn的介绍\"><a class=\"anchor\" href=\"#1-yarn的介绍\">#</a> 1、yarn 的介绍</h1>\n<p>yarn 是 hadoop 集群当中的资源管理系统模块，从 hadoop2.0 始引入 yarn 模块 yarn 可为各类计算框架提供资源的管理和调度，主要用于管理集群当中的资源 (主要是服务器的各种硬件资源，包括 CPU, 内存，磁盘，网络 1o 等) 以及调度运行在 yarn 上面的各种任务</p>\n<p>yarn 核心出发点是为了分离资源管理与作业监控，实现分离的做法是拥有一个全局的资源管理 (ResourceManager,RM), 以及每个应用程序对应一个的应用管理器 (Application Master, AM)</p>\n<p>yam 主要就是为了调度资源，管理任务等<br />\n其调度分为两个层级来说:<br />\n 一级调度管理<br />\n计算资源管理 (CPU, 内存，网络 IO, 磁盘)<br />\n 二级调度管理<br />\n任务内部的计算模型管理 (AppMaster 的任务精细化管理)</p>\n<h1 id=\"2-yarn的主要组件介绍与作用\"><a class=\"anchor\" href=\"#2-yarn的主要组件介绍与作用\">#</a> 2、Yarn 的主要组件介绍与作用</h1>\n<p>YARN 总体上是 Master/ Slave 结构，主要由 ResourceManager、NodeManager、Application Master 和 Container 等几个组件构成</p>\n<h2 id=\"1-resource-managerrm\"><a class=\"anchor\" href=\"#1-resource-managerrm\">#</a> 1、Resource Manager(RM)</h2>\n<p>负责处理客户端请求对各 NM 上的资源进行统一管理和调度。给 Application Master 分配空闲的 Container 运行并监控其运行状态。主要由两个组件构成：调度器和应用程序管理器</p>\n<h3 id=\"调度器scheduler\"><a class=\"anchor\" href=\"#调度器scheduler\">#</a> 调度器（scheduler）</h3>\n<p>调度器根据容量、队列等限制条件，将系统中的资源分配给各个正在运行的应用程序。调度器仅根据各个应用程序的资源需求进行资源分配，而资源分配单位是 Container。 Scheduler. 不负责监控或者跟踪应用程序的状态。总之，调度器根据应用程序的资源要求，以及集群机器的资源情况，为应用程序分配封装在 Container 中的资源</p>\n<h3 id=\"应用程序管理器-applications-manager\"><a class=\"anchor\" href=\"#应用程序管理器-applications-manager\">#</a> 应用程序管理器 (Applications Manager)</h3>\n<p>应用程序管理器负责管理整个系统中所有应用程序，包括应用程序提交、与调度器协商资源以启动 Application Master、监控 Application Master, 运行状态并在失败时重新启动等，跟踪分给的 Container 的进度、状态也是其职责。</p>\n<h2 id=\"2-nodemanagernm\"><a class=\"anchor\" href=\"#2-nodemanagernm\">#</a> 2、NodeManager(NM)</h2>\n<p>NodeManager 是每个节点上的资源和任务管理器。它会定时地向 ResourceManager 汇报本节点上的资源使用情况和各个 Container 的运行状态；同时会接收并处理来自 ApplicationMaster 的 Container 启动停止等请求。</p>\n<h2 id=\"3-applicationmasteram\"><a class=\"anchor\" href=\"#3-applicationmasteram\">#</a> 3、ApplicationMaster(AM)</h2>\n<p>用户提交的应用程序均包含一个 Application Master, 负责应用的监控，跟踪应用执行状态，重启失败任务等。 Application Master 是应用框架，它负责向 ResourceManager 协调资源，并且与 Node Manager 协同工作完成 Task 的执行和监控</p>\n<h2 id=\"4-container\"><a class=\"anchor\" href=\"#4-container\">#</a> 4、Container</h2>\n<p>Container 是 YARN 中的资源抽象，它封装了某个节点上的多维度资源，如内存、CPU、磁盘、网络等，当 ApplicationMaster 向 ResourceManager 申请资源时，ResourceManager 为 ApplicationMaster 返回的资源便是用 Container 表示的。</p>\n",
            "tags": []
        }
    ]
}