<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Andrésen • Posts by &#34;yarn&#34; category</title>
        <link>https://methiony.work</link>
        <description></description>
        <language>zh-CN</language>
        <pubDate>Sat, 28 Nov 2020 10:20:28 +0800</pubDate>
        <lastBuildDate>Sat, 28 Nov 2020 10:20:28 +0800</lastBuildDate>
        <item>
            <guid isPermalink="true">https://methiony.work/2020/11/28/Hadoop/Yarn/course-4/Yarn%E7%9A%84%E5%8F%82%E6%95%B0%E8%AE%BE%E7%BD%AE/</guid>
            <title>Yarn的参数设置</title>
            <link>https://methiony.work/2020/11/28/Hadoop/Yarn/course-4/Yarn%E7%9A%84%E5%8F%82%E6%95%B0%E8%AE%BE%E7%BD%AE/</link>
            <pubDate>Sat, 28 Nov 2020 10:20:28 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;1-yarn的调度器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-yarn的调度器&#34;&gt;#&lt;/a&gt; 1、yarn 的调度器&lt;/h1&gt;
&lt;p&gt;yarn 我们都知道主要是用于做资源调度，任务分配等功能的，hadoop 支持好几种任务的调度方式，不同的场景需要使用不同的任务调度器.&lt;/p&gt;
&lt;h2 id=&#34;fif0-scheduler队列调度&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#fif0-scheduler队列调度&#34;&gt;#&lt;/a&gt; FIF0 Scheduler (队列调度)&lt;/h2&gt;
&lt;p&gt;把任务按提交的顺序排成一个队列，这是一个先进先出队列，在进行资源分配的时候，先给队列中最头上的任务进行分配资源，待最头上任务需求满足后再给下一个分配，以此类推&lt;/p&gt;
&lt;p&gt;FIFO Scheduler 是最简单也是最容易理解的调度器，也不需要任何配置，但它并不适用于共享集群。大的任务可能会占用所有集群资源，这就导致其它任务被阻塞&lt;/p&gt;
&lt;h2 id=&#34;capacity-scheduler容量调度器-apache版本默认使用的调度器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#capacity-scheduler容量调度器-apache版本默认使用的调度器&#34;&gt;#&lt;/a&gt; Capacity Scheduler (容量调度器，apache 版本默认使用的调度器)&lt;/h2&gt;
&lt;p&gt;Capacity 调度器允许多个组织共享整个集群，每个组织可以获得集群的部分计算能力。通过为每个组织分配专门的队列，然后再为毎个队列分配一定的集群资源，这样整个集群就可以通过设置多个队列的方式给多个组织提供服务了。&lt;/p&gt;
&lt;p&gt;除此之外，对列内部又可以垂直划分，这样一个组织内部的多个成员就可以共享这个队列资源了，在一个队列内部，资源的调度是采用的是先进先出 (FIFO) 策略。&lt;/p&gt;
&lt;h2 id=&#34;fair-scheduler公平调度器cdh版本的-hadoop默认使用的调度器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#fair-scheduler公平调度器cdh版本的-hadoop默认使用的调度器&#34;&gt;#&lt;/a&gt; Fair Scheduler (公平调度器，CDH 版本的 hadoop 默认使用的调度器)&lt;/h2&gt;
&lt;p&gt;Fair 调度器的设计目标是为所有的应用分配公平的资源 (对公平的定义可以通过参数来设置)。公平调度在也可以在多个队列间工作。&lt;/p&gt;
&lt;p&gt;举个例子，假设有两个用户 A 和 B, 他们分别拥有一个队列。当 A 启动一个 job 而 B 没有任务时，A 会获得全部集群资源；当 B 启动一个 job 后，A 的 job 会继续运行，不过一会儿之后两个任务会各自获得一半的集群资源。如果此时 B 再启动第二个 job 并且其它 job 还在运行，则它将会和 B 的第一个 job 共享 B 这个队列的资源，也就是 B 的两个 job 会用于四分之一的集群资源，而 A 的 job 仍然用于集群一半的资源，结果就是资源最终在两个用户之间平等的共享&lt;/p&gt;
&lt;h1 id=&#34;2-yarn常用参数设置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-yarn常用参数设置&#34;&gt;#&lt;/a&gt; 2、yarn 常用参数设置&lt;/h1&gt;
&lt;h2 id=&#34;设置-container分配最小内存&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#设置-container分配最小内存&#34;&gt;#&lt;/a&gt; 设置 container 分配最小内存&lt;/h2&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;figcaption data-lang=&#34;XML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;yarn.scheduler.minimum-allocation-mb 1024&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;给应用程序 container 分配的最小内存&lt;/p&gt;
&lt;h2 id=&#34;设置-container分配最大内存&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#设置-container分配最大内存&#34;&gt;#&lt;/a&gt; 设置 container 分配最大内存&lt;/h2&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;figcaption data-lang=&#34;XML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;yarn.scheduler.maximum-allocation-mb 8192&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;给应用程序 container 分配的最大内存&lt;/p&gt;
&lt;h2 id=&#34;设置每个-container的最小虚拟内核个数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#设置每个-container的最小虚拟内核个数&#34;&gt;#&lt;/a&gt; 设置每个 container 的最小虚拟内核个数&lt;/h2&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;figcaption data-lang=&#34;XML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;yarn.scheduler.minimum-allocation-vcores 1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;每个 container 默认给分配的最小的虚拟内核个数&lt;/p&gt;
&lt;h2 id=&#34;设置每个-container的最大虚拟内核个数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#设置每个-container的最大虚拟内核个数&#34;&gt;#&lt;/a&gt; 设置每个 container 的最大虚拟内核个数&lt;/h2&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;figcaption data-lang=&#34;XML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;yarn.scheduler.maximum-allocation-vcores 32&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;每个 container 可以分配的最大的虚拟内核的个数&lt;/p&gt;
&lt;h2 id=&#34;设置-nodemanager可以分配的内存大小&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#设置-nodemanager可以分配的内存大小&#34;&gt;#&lt;/a&gt; 设置 NodeManager 可以分配的内存大小&lt;/h2&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;figcaption data-lang=&#34;XML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;yarn.nodemanager.resource.memory-mb 8192 nodemanager&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;可以分配的最大内存大小，默认 8192Mb&lt;/p&gt;
&lt;h2 id=&#34;定义每台机器的内存使用大小&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#定义每台机器的内存使用大小&#34;&gt;#&lt;/a&gt; 定义每台机器的内存使用大小&lt;/h2&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;figcaption data-lang=&#34;XML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;yarn.nodemanager.resource.memory-mb 8192&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;定义交换区空间可以使用的大小&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#定义交换区空间可以使用的大小&#34;&gt;#&lt;/a&gt; 定义交换区空间可以使用的大小&lt;/h2&gt;
&lt;p&gt;交换区空间就是讲一块硬盘拿出来做内存使用这里指定的是 nodemanager 的 2.1 倍&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;figcaption data-lang=&#34;XML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;yarn.nodemanager.vmem-pmem-ratio 2.1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://methiony.work/2020/11/27/Hadoop/Yarn/course-4/Yarn%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E8%BF%B0/</guid>
            <title>Yarn的基本概述</title>
            <link>https://methiony.work/2020/11/27/Hadoop/Yarn/course-4/Yarn%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E8%BF%B0/</link>
            <pubDate>Fri, 27 Nov 2020 21:56:16 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;1-yarn的介绍&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-yarn的介绍&#34;&gt;#&lt;/a&gt; 1、yarn 的介绍&lt;/h1&gt;
&lt;p&gt;yarn 是 hadoop 集群当中的资源管理系统模块，从 hadoop2.0 始引入 yarn 模块 yarn 可为各类计算框架提供资源的管理和调度，主要用于管理集群当中的资源 (主要是服务器的各种硬件资源，包括 CPU, 内存，磁盘，网络 1o 等) 以及调度运行在 yarn 上面的各种任务&lt;/p&gt;
&lt;p&gt;yarn 核心出发点是为了分离资源管理与作业监控，实现分离的做法是拥有一个全局的资源管理 (ResourceManager,RM), 以及每个应用程序对应一个的应用管理器 (Application Master, AM)&lt;/p&gt;
&lt;p&gt;yam 主要就是为了调度资源，管理任务等&lt;br /&gt;
其调度分为两个层级来说:&lt;br /&gt;
 一级调度管理&lt;br /&gt;
计算资源管理 (CPU, 内存，网络 IO, 磁盘)&lt;br /&gt;
 二级调度管理&lt;br /&gt;
任务内部的计算模型管理 (AppMaster 的任务精细化管理)&lt;/p&gt;
&lt;h1 id=&#34;2-yarn的主要组件介绍与作用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-yarn的主要组件介绍与作用&#34;&gt;#&lt;/a&gt; 2、Yarn 的主要组件介绍与作用&lt;/h1&gt;
&lt;p&gt;YARN 总体上是 Master/ Slave 结构，主要由 ResourceManager、NodeManager、Application Master 和 Container 等几个组件构成&lt;/p&gt;
&lt;h2 id=&#34;1-resource-managerrm&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-resource-managerrm&#34;&gt;#&lt;/a&gt; 1、Resource Manager(RM)&lt;/h2&gt;
&lt;p&gt;负责处理客户端请求对各 NM 上的资源进行统一管理和调度。给 Application Master 分配空闲的 Container 运行并监控其运行状态。主要由两个组件构成：调度器和应用程序管理器&lt;/p&gt;
&lt;h3 id=&#34;调度器scheduler&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#调度器scheduler&#34;&gt;#&lt;/a&gt; 调度器（scheduler）&lt;/h3&gt;
&lt;p&gt;调度器根据容量、队列等限制条件，将系统中的资源分配给各个正在运行的应用程序。调度器仅根据各个应用程序的资源需求进行资源分配，而资源分配单位是 Container。 Scheduler. 不负责监控或者跟踪应用程序的状态。总之，调度器根据应用程序的资源要求，以及集群机器的资源情况，为应用程序分配封装在 Container 中的资源&lt;/p&gt;
&lt;h3 id=&#34;应用程序管理器-applications-manager&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#应用程序管理器-applications-manager&#34;&gt;#&lt;/a&gt; 应用程序管理器 (Applications Manager)&lt;/h3&gt;
&lt;p&gt;应用程序管理器负责管理整个系统中所有应用程序，包括应用程序提交、与调度器协商资源以启动 Application Master、监控 Application Master, 运行状态并在失败时重新启动等，跟踪分给的 Container 的进度、状态也是其职责。&lt;/p&gt;
&lt;h2 id=&#34;2-nodemanagernm&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-nodemanagernm&#34;&gt;#&lt;/a&gt; 2、NodeManager(NM)&lt;/h2&gt;
&lt;p&gt;NodeManager 是每个节点上的资源和任务管理器。它会定时地向 ResourceManager 汇报本节点上的资源使用情况和各个 Container 的运行状态；同时会接收并处理来自 ApplicationMaster 的 Container 启动停止等请求。&lt;/p&gt;
&lt;h2 id=&#34;3-applicationmasteram&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-applicationmasteram&#34;&gt;#&lt;/a&gt; 3、ApplicationMaster(AM)&lt;/h2&gt;
&lt;p&gt;用户提交的应用程序均包含一个 Application Master, 负责应用的监控，跟踪应用执行状态，重启失败任务等。 Application Master 是应用框架，它负责向 ResourceManager 协调资源，并且与 Node Manager 协同工作完成 Task 的执行和监控&lt;/p&gt;
&lt;h2 id=&#34;4-container&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-container&#34;&gt;#&lt;/a&gt; 4、Container&lt;/h2&gt;
&lt;p&gt;Container 是 YARN 中的资源抽象，它封装了某个节点上的多维度资源，如内存、CPU、磁盘、网络等，当 ApplicationMaster 向 ResourceManager 申请资源时，ResourceManager 为 ApplicationMaster 返回的资源便是用 Container 表示的。&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
