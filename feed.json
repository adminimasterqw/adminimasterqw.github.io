{
    "version": "https://jsonfeed.org/version/1",
    "title": "Andrésen",
    "description": "",
    "home_page_url": "https://methiony.work",
    "items": [
        {
            "id": "https://methiony.work/2020/11/19/Hbase/",
            "url": "https://methiony.work/2020/11/19/Hbase/",
            "title": "Hbase",
            "date_published": "2020-11-19T07:53:18.000Z",
            "content_html": "<h1 id=\"hbase基础系列1\"><a class=\"anchor\" href=\"#hbase基础系列1\">#</a> Hbase 基础系列（1）</h1>\n<h2 id=\"1-hbase定义\"><a class=\"anchor\" href=\"#1-hbase定义\">#</a> 1、 HBase 定义</h2>\n<p>HBase 是一种分布式、可扩展、支持海量数据存储的 NoSQL 数据库。</p>\n<h2 id=\"2-hbase特点\"><a class=\"anchor\" href=\"#2-hbase特点\">#</a> 2、HBase 特点</h2>\n<ul>\n<li>1. 海量存储</li>\n</ul>\n<p>Hbase 适合存储 PB 级别的海量数据，在 PB 级别的数据以及采用廉价 PC 存储的情况下，能在几十到百毫秒内返回数据。这与 Hbase 的极易扩展性息息相关。正式因为 Hbase 良好的扩展性，才为海量数据的存储提供了便利。</p>\n<ul>\n<li>2. 列式存储</li>\n</ul>\n<p>这里的列式存储其实说的是列族存储，Hbase 是根据列族来存储数据的。列族下面可以有非常多的列，列族在创建表的时候就必须指定。</p>\n<ul>\n<li>3. 极易扩展</li>\n</ul>\n<p>Hbase 的扩展性主要体现在两个方面，一个是基于上层处理能力（RegionServer）的扩展，一个是基于存储的扩展（HDFS）。<br />\n通过横向添加 RegionSever 的机器，进行水平扩展，提升 Hbase 上层的处理能力，提升 Hbsae 服务更多 Region 的能力。<br />\n  备注：RegionServer 的作用是管理 region、承接业务的访问，这个后面会详细的介绍通过横向添加 Datanode 的机器，进行存储层扩容，提升 Hbase 的数据存储能力和提升后端存储的读写能力。</p>\n<ul>\n<li>4. 高并发</li>\n</ul>\n<p>由于目前大部分使用 Hbase 的架构，都是采用的廉价 PC，因此单个 IO 的延迟其实并不小，一般在几十到上百 ms 之间。这里说的高并发，主要是在并发的情况下，Hbase 的单个 IO 延迟下降并不多。能获得高并发、低延迟的服务。</p>\n<ul>\n<li>5. 稀疏</li>\n</ul>\n<p>稀疏主要是针对 Hbase 列的灵活性，在列族中，你可以指定任意多的列，在列数据为空的情况下，是不会占用存储空间的。</p>\n<h2 id=\"3-hbase的数据模型\"><a class=\"anchor\" href=\"#3-hbase的数据模型\">#</a> 3、Hbase 的数据模型</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovLzEuTmFtZQ==\">1.Name</span> Space</li>\n</ul>\n<p>命名空间，类似于关系型数据库的 database 概念，每个命名空间下有多个表。HBase 两个自带的命名空间，分别是 hbase 和 default，hbase 中存放的是 HBase 内置的表，default 表是用户默认使用的命名空间。</p>\n<ul>\n<li>2.Table</li>\n</ul>\n<p>类似于关系型数据库的表概念。不同的是，HBase 定义表时只需要声明列族即可，不需要声明具体的列。这意味着，往 HBase 写入数据时，字段可以动态、按需指定。因此，和关系型数据库相比，HBase 能够轻松应对字段变更的场景。</p>\n<ul>\n<li>3.Row</li>\n</ul>\n<p>HBase 表中的每行数据都由一个 RowKey 和多个 Column（列）组成，数据是按照 RowKey 的字典顺序存储的，并且查询数据时只能根据 RowKey 进行检索，所以 RowKey 的设计十分重要。</p>\n<ul>\n<li>4.Column</li>\n</ul>\n<p>HBase 中的每个列都由 Column Family (列族) 和 Column Qualifier（列限定符）进行限定，例如 info：name，info：age。建表时，只需指明列族，而列限定符无需预先定义。</p>\n<ul>\n<li>5.Time Stamp</li>\n</ul>\n<p>用于标识数据的不同版本（version），每条数据写入时，系统会自动为其加上该字段，其值为写入 HBase 的时间。</p>\n<ul>\n<li>6.Cell</li>\n</ul>\n<p>由 {rowkey, column Family：column Qualifier, time Stamp} 唯一确定的单元。cell 中的数据是没有类型的，全部是字节码形式存贮。</p>\n<h2 id=\"4-hbase架构\"><a class=\"anchor\" href=\"#4-hbase架构\">#</a> 4、 HBase 架构</h2>\n<ul>\n<li>1.Client</li>\n</ul>\n<p>Client 包含了访问 Hbase 的接口，另外 Client 还维护了对应的 cache 来加速 Hbase 的访问，比如 cache 的.META. 元数据的信息。</p>\n<ul>\n<li>2.Zookeeper</li>\n</ul>\n<p>HBase 通过 Zookeeper 来做 master 的高可用、RegionServer 的监控、元数据的入口以及集群配置的维护等工作。具体工作如下：</p>\n<blockquote>\n<p>通过 Zoopkeeper 来保证集群中只有 1 个 master 在运行，如果 master 异常，会通过竞争机制产生新的 master 提供服务<br />\n通过 Zoopkeeper 来监控 RegionServer 的状态，当 RegionSevrer 有异常的时候，通过回调的形式通知 MasterRegionServer 上下线的信息<br />\n通过 Zoopkeeper 存储元数据的统一入口地址</p>\n</blockquote>\n<ul>\n<li>3.Hmaster</li>\n</ul>\n<p>master 节点的主要职责如下：</p>\n<blockquote>\n<p>为 RegionServer 分配 Region<br />\n 维护整个集群的负载均衡<br />\n维护集群的元数据信息<br />\n发现失效的 Region，并将失效的 Region 分配到正常的 RegionServer 上<br />\n当 RegionSever 失效的时候，协调对应 Hlog 的拆分</p>\n</blockquote>\n<ul>\n<li>4.HregionServer</li>\n</ul>\n<p>HregionServer 直接对接用户的读写请求，是真正的 “干活” 的节点。它的功能概括如下：</p>\n<blockquote>\n<p>管理 master 为其分配的 Region<br />\n 处理来自客户端的读写请求<br />\n负责和底层 HDFS 的交互，<br />\n存储数据到 HDFS<br />\n 负责 Region 变大以后的拆分<br />\n负责 Storefile 的合并工作</p>\n</blockquote>\n<ul>\n<li>5.HDFS</li>\n</ul>\n<p>HDFS 为 Hbase 提供最终的底层数据存储服务，同时为 HBase 提供高可用（Hlog 存储在 HDFS）的支持，具体功能概括如下：</p>\n<blockquote>\n<p>提供元数据和表数据的底层分布式存储服务<br />\n数据多副本，保证的高可靠和高可用性</p>\n</blockquote>\n<h2 id=\"5-hbase中的角色\"><a class=\"anchor\" href=\"#5-hbase中的角色\">#</a> 5、HBase 中的角色</h2>\n<h4 id=\"1-hmaster\"><a class=\"anchor\" href=\"#1-hmaster\">#</a> 1 HMaster</h4>\n<ul>\n<li>功能</li>\n<li>1．监控 RegionServer</li>\n<li>2．处理 RegionServer 故障转移</li>\n<li>3．处理元数据的变更</li>\n<li>4．处理 region 的分配或转移</li>\n<li>5．在空闲时间进行数据的负载均衡</li>\n<li>6．通过 Zookeeper 发布自己的位置给客户端</li>\n</ul>\n<h4 id=\"2-regionserver\"><a class=\"anchor\" href=\"#2-regionserver\">#</a> 2 RegionServer</h4>\n<ul>\n<li>功能</li>\n<li>1．负责存储 HBase 的实际数据</li>\n<li>2．处理分配给它的 Region</li>\n<li>3．刷新缓存到 HDFS</li>\n<li>4．维护 Hlog</li>\n<li>5．执行压缩</li>\n<li>6．负责处理 Region 分片</li>\n</ul>\n<h4 id=\"3-其他组件\"><a class=\"anchor\" href=\"#3-其他组件\">#</a> 3. 其他组件</h4>\n<ul>\n<li>1．Write-Ahead logs</li>\n</ul>\n<p>HBase 的修改记录，当对 HBase 读写数据的时候，数据不是直接写进磁盘，它会在内存中保留一段时间（时间以及数据量阈值可以设定）。但把数据保存在内存中可能有更高的概率引起数据丢失，为了解决这个问题，数据会先写在一个叫做 Write-Ahead logfile 的文件中，然后再写入内存中。所以在系统出现故障的时候，数据可以通过这个日志文件重建。</p>\n<ul>\n<li>2．Region</li>\n</ul>\n<p>Hbase 表的分片，HBase 表会根据 RowKey 值被切分成不同的 region 存储在 RegionServer 中，在一个 RegionServer 中可以有多个不同的 region。</p>\n<ul>\n<li>3．Store</li>\n</ul>\n<p>HFile 存储在 Store 中，一个 Store 对应 HBase 表中的一个列族。</p>\n<ul>\n<li>4．MemStore</li>\n</ul>\n<p>顾名思义，就是内存存储，位于内存中，用来保存当前的数据操作，所以当数据保存在 WAL 中之后，RegsionServer 会在内存中存储键值对。</p>\n<ul>\n<li>5．HFile</li>\n</ul>\n<p>这是在磁盘上保存原始数据的实际的物理文件，是实际的存储文件。StoreFile 是以 Hfile 的形式存储在 HDFS 的。</p>\n",
            "tags": []
        },
        {
            "id": "https://methiony.work/2020/11/15/MySQL-0/",
            "url": "https://methiony.work/2020/11/15/MySQL-0/",
            "title": "MySQL",
            "date_published": "2020-11-15T10:43:49.000Z",
            "content_html": "<h2 id=\"mysql服务的登录和退出\"><a class=\"anchor\" href=\"#mysql服务的登录和退出\">#</a> MySql 服务的登录和退出</h2>\n<p>​\t\t方式一：通过 mysql 自带的客户端：只限于 root 用户</p>\n<p>​\t\t方式二：通过 Windows 自带的客户端：1、登录：</p>\n<pre><code>mysql\t[-h主机名\t-p端口号]\t-u用户名\t-p 密码\n</code></pre>\n<p>​\t\t退出：</p>\n<pre><code>exit或ctrl + c\n</code></pre>\n<h2 id=\"mysql的常见命令\"><a class=\"anchor\" href=\"#mysql的常见命令\">#</a> MySql 的常见命令</h2>\n<p>​\t\t1、查看当前所有的数据库：</p>\n<pre><code>show\tdatabases;\n</code></pre>\n<p>​\t\t2、打开指定的库：</p>\n<pre><code>use\t库名\n</code></pre>\n<p>​\t\t3、查看当前库的所有表：</p>\n<pre><code>show\ttables;\n</code></pre>\n<p>​\t\t4、查看其他库的所有表：</p>\n<pre><code>show\ttables\tfrom\t库名;\n</code></pre>\n<p>​\t\t5、创建表：</p>\n<pre><code>create\ttable\t表名(\n\n​\t\t\t\t\t\t列名\t列类型,\n\n​\t\t\t\t\t\t列名\t列类型,\n\n​\t\t\t\t\t\t...\n\n​\t\t\t)\n</code></pre>\n<p>​\t\t6、查看表结构：</p>\n<pre><code>desc\t表名;\n</code></pre>\n<p>​\t\t7、查看服务器的版本</p>\n<p>​\t\t\t方式一、登录到 mysql 服务端:</p>\n<pre><code>select\tversion();\n</code></pre>\n<p>​\t\t\t方式二、没有登录到 mysql 服务端:</p>\n<pre><code>mysql\t--version或\tmysql\t--v\n</code></pre>\n<h3 id=\"进阶1基础查询\"><a class=\"anchor\" href=\"#进阶1基础查询\">#</a> 进阶 1：基础查询</h3>\n<p>语法：</p>\n<pre><code>select\t查询列表\tfrom\t表名;\n</code></pre>\n<p>特点：</p>\n<p>1、查询列表可以是：表中的字段、常量值、表达式、函数</p>\n<p>2、查询的结果是一个虚拟的表格</p>\n<p>a、查询表中的单个字段：</p>\n<pre><code>select\t查询列表\tfrom\t表名;\n</code></pre>\n<p>b、查询表中的多个字段：</p>\n<pre><code>select\t查询列表1,查询列表2,...\tfrom\t表名;\n</code></pre>\n<p>c、查询表中的所有字段：</p>\n<pre><code>select\t*\tfrom\t表名;\n</code></pre>\n<p>d、查询常量值：</p>\n<pre><code>select\t100;\tselect\t'john';\n</code></pre>\n<p>e、查询表达式：</p>\n<pre><code>select\t100%98;\n</code></pre>\n<p>f、查询函数：</p>\n<pre><code>select\tversion();\n</code></pre>\n<p>3、起别名：便于理解、如果查询的字段有重名的情况，使用别名区分</p>\n<p>a、使用 as</p>\n<pre><code>select\t100%98\tas\t结果;\n</code></pre>\n<pre><code>select\t查询列表1 as 别名,查询列表2 as 别名\tfrom\t表名;\n</code></pre>\n<p>b、使用空格</p>\n<pre><code>select\t查询列表1  别名,查询列表2  别名\tfrom\t表名;\n</code></pre>\n<p>4、去重</p>\n<pre><code>select\tdistinct\t查询列表\tfrom\t表名;\n</code></pre>\n<h3 id=\"进阶2条件查询\"><a class=\"anchor\" href=\"#进阶2条件查询\">#</a> 进阶 2：条件查询</h3>\n<p>语法：</p>\n<pre><code>select\t查询列表\tfrom\t表名\twhere\t筛选条件;\n</code></pre>\n<p>分类：</p>\n<p>一、按条件表达式筛选</p>\n<p>简单条件运算符：</p>\n<pre><code>&gt;\t&lt;\t=\t!=\t&lt;&gt;\t&gt;=\t&lt;=\n</code></pre>\n<p>二、按逻辑表达式筛选</p>\n<p>逻辑运算符：</p>\n<pre><code>&amp;&amp;\t||\t！\tand\tor\tnot\n</code></pre>\n<p>三、模糊查询</p>\n<pre><code>like\tbetween\tand\tin\tis\tnull\n</code></pre>\n<h2 id=\"mysql的语法规范\"><a class=\"anchor\" href=\"#mysql的语法规范\">#</a> Mysql 的语法规范</h2>\n<p>​\t\t\t1、不区分大小写，但建议关键词大写，表名、列名小写</p>\n<p>​\t\t\t2、每条命令最好用分号结尾</p>\n<p>​\t\t\t3、每条命令根据需要，可以进行缩进或换行</p>\n<p>​\t\t\t4、注释：a、单行注释：# 注释文字\tb、单行注释：-- 注释文字\tc、单行注释：/ *   注释文字   */</p>\n<p>​\t\t\t5、mysql 中的 + 号：只有作为运算符的功能</p>\n",
            "tags": []
        },
        {
            "id": "https://methiony.work/2020/11/06/hello-world/",
            "url": "https://methiony.work/2020/11/06/hello-world/",
            "title": "Hello World",
            "date_published": "2020-11-06T00:20:44.528Z",
            "content_html": "<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub</span>.</p>\n<h2 id=\"quick-start\"><a class=\"anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure></p>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"run-server\"><a class=\"anchor\" href=\"#run-server\">#</a> Run server</h3>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure></p>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure></p>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure></p>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n",
            "tags": []
        }
    ]
}